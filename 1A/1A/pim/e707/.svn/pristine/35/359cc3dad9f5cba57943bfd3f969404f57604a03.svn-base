with arbre_genealogique;
use arbre_genealogique;
with registre;
use registre;
with Ada.Text_IO;
use Ada.Text_IO;
with Ada.Integer_Text_IO;
use Ada.Integer_Text_IO;

procedure tests_arbre_genealogique is
    A:T_Arbre_Gen;
    R:T_Registre;
begin
    Initialiser_Arbre_Gen(A,R,5);
    pragma assert (Est_Present_Gen(A,5));

    Ajouter_Arbre_Gen(A,R,10,5,True);
    Ajouter_Arbre_Gen(A,R,3,5,False);
    Ajouter_Arbre_Gen(A,R,4,3,False);
    Ajouter_Arbre_Gen(A,R,101,10,True);
    Ajouter_Arbre_Gen(A,R,100,10,False);

    Afficher_Arbre_Gen(A,5);
    Afficher_Liste(Un_Parent(A));
    New_Line;
    Afficher_Liste(Deux_Parents(A));
    New_Line;
    Afficher_Liste(Aucun_Parent(A));--marche pas
    New_Line;
    Afficher_Liste(Ancetres_Gen(A,1));
    New_Line;
    Put(Obtenir_nb_ancetres(A,5));
    New_Line;
    New_Line;
    New_Line;
    New_Line;
    New_Line;

    Afficher_Arbre_Gen(A,5);
    New_Line;
    New_Line;
    New_Line;
    New_Line;


   Afficher_Liste(Homonyme(A,R,3,10));



--    pragma assert (Obtenir_nb_ancetres(A,5) = 4);
  --  Afficher_Liste(Obtenir_nb_ancetres_gen(A,5,2));

    --Afficher_Arbre_Gen(A,2);
    --Supprimer_Noeud_Gen(A,3);

 --   pragma assert(Obtenir_nb_ancetres(A,5)=2);
   -- Afficher_Liste(Obtenir_nb_ancetres_gen(A,5,2));

    Detruire(A);
end tests_arbre_genealogique;
