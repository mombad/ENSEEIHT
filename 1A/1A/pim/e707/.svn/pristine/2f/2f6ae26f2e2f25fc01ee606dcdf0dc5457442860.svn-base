R0: -Réaliser la partie 1.

R1: -Créer une interface conviviale pour l'utilisateur.
    -Définir les opérations de manipulations de l'arbre.
    -Définir les opérations de manipulations du registre.

R2: -Raffinage de "Créer une interface conviviale pour l'utilisateur."

Ecrire("Bienvenue dans le programme de gestion d'arbre généalogique")

TANT QUE reponse/=q FAIRE

    Ecrire("Choisissez une action à effectuer : ")
    Ecrire("-Pour ajouter un individu, entrez 1")
    Ecrire("-Pour obtenir le nombre d'ancêtres connus d'un individu, entrez 2")
    Ecrire("-Pour obtenir l'ensembles des ancêtres situés à une certaine génération d'un individu, entrez 3")
    Ecrire("-Pour afficher l'arbre d'un individu, entrez 4")
    Ecrire("-Pour supprimer un individu et ses ancêtres, entrez 5")
    Ecrire("-Pour obtenir l'ensemble des individus qui n'ont qu'un parent connu, entrez 6")
    Ecrire("-Pour obtenir l'ensemble des individus qui dont les deux parents sont connus, entrez 7")
    Ecrire("-Pour obtenir l'ensemble des individus dont les 2 parents sont inconnus, entrez 8")
    Ecrire("-Pour identifier les ancêtres d'un individu sur n générations, entrez 9")
    Ecrire("-Pour vérifier que 2 individus un ou plusieurs ancêtres homonymes, entrez 10")  
    Ecrire("-Pour acceder au registre, entrer 11") 
    Ecrire("-Pour quitter le programme, entrez q")


    Lire(reponse)

    Ecrire("-Vous avez choisi l'option ...")
    ...
    Ecrire("Opération réussie")

Fin TANT QUE






    -Raffinage de "Définir les opérations de manipulations de l'arbre."

- procedure Initialiser_Arbre_Arbre_Gen(A : out T_Arbre_Genealogique;Cle : in Integer)
    Post=> A.all.Cle=Cle


- procedure Ajouter_Arbre_Gen(A: in out T_Arbre_Gen;R: in out T_Registre; Cle_parent: in Integer ;Cle_enfant: in Integer; Choix: in boolean)
    --Exception Est_Absent_Cle dans le cas ou Cle_enfant n'existe pas.
    --Exception Est_Present_Cle dans le cas ou le parent existe déja.


- function Obtenir_nb_ancetres(A: in T_Arbre_Genealogique, Cle: in T_Cle) retourne T_Cle
    --exception Est_Absent_Cle dans le cas ou Cle n'existe pas.


- function Obtenir_nb_ancetres_Gen(A : in T_Arbre_Genealogique, Cle: in T_Cle, Gen : in T_Cle) retourne T_Liste 
    --exception Est_Absent_Cle dans le cas ou Cle n'existe pas.


- procedure Afficher_Arbre_Gen(A : in T_Arbre_Genealogique, Cle : in T_Cle)
    --exception Est_Absent_Cle dans le cas ou Cle n'existe pas.


- procedure Supprimer_Noeud_Gen(A : in out T_Arbre_Genealogique, Cle : in T_Cle)
    --exception Est_Absent_Cle dans le cas ou Cle n'existe pas.


- function Un_Parent(A: in T_Arbre_Genealogique) retourne T_Liste


- function Deux_Parents(A:in T_Arbre_Genealogique) retourne T_Liste


- function Aucun_Parent(A : in T_Arbre_Genealogique) retourne T_Liste


- function Ancetres_Gen(A : in T_Arbre_Genealogique, Gen: in T_Cle) retourne T_Liste


- function Homonyme(A: in T_Arbre_Genealogique, n: in T_Cle, m: in T_Cle) retourne T_Liste



    -Raffinage de "Comment acceder au registre."

Ecrire("Que voulez-vous faire ?")
Ecrire("Supprimer,ajouter,lire (s/a/l)")
Lire(Rep_Registre)



    procedure Ajouter_R(R: in out T_Registre,Cle: in T_Cle, I: in T_Information)

    procedure Supprimer_R(R:in out T_Registre, Cle:in T_Cle)

    procedure Modifier_R(R:in out T_Registre, Cle:in T_Cle, I: in T_Information)
