With lien;
use lien;
Package Registre is
    subtype NSTR is String(1..45);

    type T_Info is limited private;

    Type T_Registre is limited private;

    -- Initialiser le registre.
    procedure Initialiser_R(R: out T_Registre);


     --Détruit un registre.
    procedure Detruire_R(R:in out T_Registre);


    --Supprime toutes les informations connues pour un individu donné.
    procedure Detruire_Information(I:in out T_Info);


    --Vérifier si le registre est vide
    function Est_Vide_R(R:in T_Registre) return Boolean;


    --Indique si une clé est présente ou non dans le registre.
    function Est_Present_R(R:in T_Registre; Cle:in Integer) return Boolean;


    --Ajouter un individu.
    procedure Ajouter_R_individu(R: in out T_Registre;Cle: in Integer);
    --Exception Est_Present_Cle si l'individu existe déjà.


    --Ajouter une information.
    procedure Ajouter_R_info(R: in out T_Registre;Cle: in Integer);
    -- Exception Est_Absent_Cle si la cle n'est pas dans le registre.


    --Supprimer un individu.
    procedure Supprimer_R_individu(R:in out T_Registre; Cle:in Integer);
    -- Exception Est_Absent_Cle si la clé n'existe pas.


    --Supprimer une information.
    procedure Supprimer_R_information(R:in out T_Registre; Cle:in Integer);
    -- Exception Est_Absent_Cle si la clé n'existe pas.


    --Afficher toutes les clés des individus présents dans le registre.
    procedure Afficher_R(R:in T_Registre);


    --Afficher toutes les informations d'un individu donné.
    procedure Afficher_info(R:in T_Registre; Cle:in Integer);


    --Retourne le nombre d'informations connues pour un individu donné
    function Nb_info(R:in T_Registre; Cle:in Integer) return Integer;


    --Renvoie le nom d'un individu donné
    function Obtenir_Nom(R:in T_Registre; Cle:in Integer) return NSTR;
   -- Exception Est_Absent_Cle si la clé n'existe pas.

   function suivant(R: in T_Registre) return T_Registre;

   function Obtenir_Cle_R(R: in T_Registre) return Integer;

   function est_egal_null_R(R: in T_Registre) return boolean;

   procedure egal_R(R1: out T_Registre; R2: in T_Registre);



private

    Type T_Cellule_Registre;
    Type T_Registre is access T_Cellule_Registre;
    Type T_Cellule_Registre is
        record
            Cle: Integer;
            Information : T_Info;
            suivant: T_Registre;
        end record;

  type T_Cellule_Info;

type T_Info is access T_Cellule_Info;
    type T_Cellule_Info is

        record
            info: NSTR;
            infosuivante : T_Info;
        end record;
end Registre;

