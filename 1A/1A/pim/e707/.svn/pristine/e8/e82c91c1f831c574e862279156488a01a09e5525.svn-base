with arbre_genealogique;
use arbre_genealogique;
with registre;
use registre;
with Ada.Text_IO;
use Ada.Text_IO;
with Ada.Integer_Text_IO;
use Ada.Integer_Text_IO;
with lien;
use lien;
--with foret;
--use foret;

procedure menu is
    A:T_Arbre_Gen;
    R:T_Registre;
    ajout,rep_exception,rep_exception1,rep_registre : Character;
    reponse : Integer;
    Cle,Cle_parent,Cle_m,Cle_n : Integer;
    Info :T_Info;
    Gen : Integer;

    procedure detect_exception_ancetre (A: in T_Arbre_Gen; Cle: in Integer) is
    begin
      Put(Obtenir_nb_ancetres(A,Cle));
      New_Line;
      Put("-Opération réussie");
      New_Line;
    exception
        when Est_Absent_Cle => Put("attention! Cle absente");
            New_Line;
         Put("-echec de l'operation");
         New_Line;
    end detect_exception_ancetre;

    procedure detect_exception_2(A : in out T_Arbre_Gen; Cle: in Integer; Gen : in Integer) is
    begin
     -- Put("Liste des ancetres : ");

      New_Line;
      Put("Cles : ") ;
      New_Line;
      afficher_Liste(Obtenir_nb_ancetres_Gen(A,Cle,Gen));
      Put("opération réussie");
      New_Line;


    exception
        when Est_Absent_Cle => Put("recherche impossible :la Cle est absente");
            New_Line;
         Put("Echec de l'operation");
         New_Line;
   end detect_exception_2;


   procedure detect_exception_3(A: in out T_Arbre_Gen; Cle: in Integer) is
   begin
      Afficher_Arbre_Gen(A,Cle);
      Put("Operation reussie");
   exception
      when Est_Absent_Cle => Put("Affichage impossible : la cle est absente");
         New_Line;
         Put("echec de l'operation");
         New_Line;
   end detect_exception_3;

   procedure detect_exception_ajouter(A: in out T_Arbre_Gen;R: in out T_Registre;  Cle_Parent : in Integer; Cle_enfant : in Integer) is
      A1 : T_Arbre_Gen;
   begin
      Get(ajout);
            if ajout = 'g' then
                Ajouter_Arbre_Gen(A,R,Cle_parent,Cle_enfant,True);
            else
                Ajouter_Arbre_Gen(A,R,Cle_parent,Cle_enfant,False);
            end if;
   exception
      when Est_Present_Cle => Put("erreur: cette clé est déja présente dans l'arbre");
         New_Line;
         Put("echec de l'operation");
         New_Line;
      when Est_absent_Cle => Put("erreur: Cle enfant absente");
         New_Line;
         Put("generer cle enfant?");
         New_Line;
         Put("o/n: ");
         Get(rep_exception);
         if rep_exception = 'o' then
             if ajout = 'g' then
               Ajouter_Arbre_Gen(A,R,Cle_enfant,obtenir_element(Aucun_Parent(A)),True);
               Ajouter_Arbre_Gen(A,R,Cle_parent,Cle_enfant,True);

             else
               Ajouter_Arbre_Gen(A,R,Cle_enfant,obtenir_element(Aucun_Parent(A)),False);

             end if;


         else
            Put(" vous avez abandonne l'operation ajouter");
         end if;

      when others => put("le noeud est déjà occupé ");
         New_Line;
         Put("remplacer l'ancien noeud par le nouveau (o/n)?");
         New_Line;
         Get(rep_exception1);
         if rep_exception1 = 'o' then
            if ajout = 'g' then
               chercher_Noeud(A,A1,Cle_enfant);
               supprimer_R_individu(R,obtenir_cle(gauche(A1)));
               --supprimer_R_information(R,Obtenir_Cle(gauche(A1)));
               Ajouter_R_individu(R,Cle_parent);
               egal(A1,gauche(A1));
               egal_Cle(A1,Cle_parent);
            else
               chercher_Noeud(A,A1,Cle_enfant);
               supprimer_R_individu(R,obtenir_cle(droite(A1)));
              -- supprimer_R_information(R,Obtenir_Cle(droite(A1)));
               Ajouter_R_individu(R,Cle_parent);
               egal(A1,droite(A1));
               egal_Cle(A1,Cle_parent);
            end if;
            New_Line;
            Put("operation reussie");
            New_Line;
         else
            null;
         end if;



         -- Partie : mohamed






   end detect_exception_ajouter;

   procedure detect_exception_ajouter_bis(A: in out T_Arbre_Gen;R: in out T_Registre;  Cle_Parent : in Integer; Cle_enfant : in Integer) is
   begin
      detect_exception_ajouter(A,R,Cle_Parent,Cle_enfant);
   exception
      when Est_absent_Cle => Put("erreur: cette clé est absente de l'arbre");
         New_Line;
         Put("echec de l'operation");
         New_Line;

   end detect_exception_ajouter_bis;

   procedure detect_exception_4(A: in out T_Arbre_Gen; R: in out T_Registre; Cle : in Integer) is
   begin
      Supprimer_Noeud_Gen(A,Cle,R);
      Put("operation reussie");
   exception
      when est_absent_cle => Put("erreur: la cle entrée n'existe pas");
         New_Line;
         Put("echec de l'operation");
         New_Line;
   end detect_exception_4;

   procedure detect_exception_8(A : in T_Arbre_Gen;Cle:in Integer; Gen: in Integer) is
   begin
      Put(" Liste des ancetres de l'individu choisi sur ");
      Put(gen);
      Put(" generation : ");
      Afficher_Liste(Ancetres_Gen(A,Cle,Gen));
      New_Line;
      Put("operation reussie");
   exception
         when Est_Absent_Cle => Put("attention! Cle absente");
            New_Line;
         Put("-echec de l'operation");
         New_Line;
   end detect_exception_8;

   procedure detect_exception_9(A: in T_Arbre_Gen;R: in T_Registre; n: in Integer; m: in Integer) is
   begin
      Put(" Liste des cles des ancetres homonymes de n et m :  ");
      afficher_Liste(Homonyme(A,R,n,m));
   exception
      when Est_Absent_Cle => Put("erreur: une des cles entrées n'existe pas");
         New_Line;
         Put("echec de l'operation");
         New_Line;
   end detect_exception_9;












begin

    Put("**********************************BIENVENUE DANS LE PROGRAMME DE GESTION D'ARBRE GENEALOGIQUE************************************");
    New_Line;
    New_Line;
    New_Line;
    Put("entrer le premier individu");
    New_Line;
    Put("Cle associee : ");
    Get(Cle);
    New_Line;
    Initialiser_Arbre_Gen(A,Cle);
    Initialiser_R(R);
    Ajouter_R_individu(R,Cle);
    Skip_Line;
    New_Line;
    Put("Choisissez une action a  effectuer : ");
    New_Line;
    reponse:= 12;
    while reponse/= 0 loop



        Put("-Pour ajouter un individu, entrez 1");
        New_Line;
        Put("-Pour obtenir le nombre d'ancetres connus d'un individu, entrez 2");
        New_Line;
        Put("-Pour obtenir l'ensembles des ancetres situees a  une certaine generation d'un individu, entrez 3");
        New_Line;
        Put("-Pour afficher l'arbre d'un individu, entrez 4");
        New_Line;
        Put("-Pour supprimer un individu et ses ancetres, entrez 5");
        New_Line;
        Put("-Pour obtenir l'ensemble des individus qui n'ont qu'un parent connu, entrez 6");
        New_Line;
        Put("-Pour obtenir l'ensemble des individus dont les deux parents sont connus, entrez 7");
        New_Line;
        Put("-Pour obtenir l'ensemble des individus dont les 2 parents sont inconnus, entrez 8");
        New_Line;
        Put("-Pour identifier les ancetres d'un individu sur n generations, entrez 9");
        New_Line;
        Put("-Pour verifier que 2 individus un ou plusieurs ancetres homonymes, entrez 10");
        New_Line;
        Put("-Pour acceder au registre , entrez 11");
        New_Line;
        Put("-Pour quitter le programme, entrez 0");
        New_Line;
        Get(reponse);

        if reponse = 1 then


            Put("-Vous avez choisi l'option: ajouter un individu ");
            New_Line;
            Put(" Veuillez entrer la Cle et l'information associees a  l'individu ainsi que la cle associee au parent.");
            New_Line;
            Put("Cle de l'enfant : ");
            Get(Cle);
            Put("Cle du parent : ");
            Get(Cle_parent);
         Put("Veuillez entrer 'g' pour ajouter une mere, 'd' pour ajouter un pere ");
         detect_exception_ajouter(A,R,Cle_parent,Cle);




            --Ajouter_R_individu(R,Cle);


            --New_Line;
            --Afficher_R(R);


            New_Line;
            New_Line;
            New_Line;

            Put("***********************************************************************************************************************");
            New_Line;
            New_Line;
            New_Line;
            Put("-Veuillez choisir une autre action a effectuer");
            New_Line;

        elsif reponse = 2 then
            Put("-Vous avez choisi l'option: obtenir le nombre d'ancetres connus d'un individu ");
            New_Line;
            Put("veuillez entrer la Cle associee a  l'individu");
            New_Line;
            Put("Cle : ");
            Get(Cle);
            New_Line;
            Put("le nombre d'ancetre correspondant a  cet individu y compris lui est : ");
            --Put(Obtenir_nb_ancetres(A,Cle));
            detect_exception_ancetre(A,Cle);
          --  exception
          --  when Est_Absent_Cle => Put("Cle_absente");
            New_Line;
            New_Line;
            New_Line;
            Put("***********************************************************************************************************************");
            New_Line;
            New_Line;
            New_Line;
            Put("-Veuillez choisir une autre action a  effectuer : ");

        elsif reponse = 3 then
            Put("-Vous avez choisi l'option: obtenir l'ensembles des ancetres situes a  une certaine generation d'un individu ");
            New_Line;
            Put(" Veuillez entrer la Clé associée à l'individu ainsi que la generation a  laquelle se situe les ancetres.");
            New_Line;
            Put("Cle : ");
            Get(Cle);
            New_Line;

            Put("Generation : ");
            Get(gen);
            detect_exception_2(A,Cle,gen);
            New_Line;
            New_Line;
            New_Line;

            Put("***********************************************************************************************************************");
            New_Line;
            New_Line;
            New_Line;
            Put("-Veuillez choisir une autre action a  effectuer");
            New_Line;

      elsif reponse = 4 then
         Put("-Vous avez choisi l'option: afficher l'arbre d'un individu ");
         New_Line;
         Put("veuillez entrer la Cle associee a  l'individu");
         New_Line;
         Put("Cle : ");
         get(CLe);
         New_Line;
         detect_exception_3(A,Cle);
         New_Line;
         New_Line;
         New_Line;

         Put("***********************************************************************************************************************");
         New_Line;
         New_Line;
         New_Line;
         Put("-Veuillez choisir une autre action a  effectuer");
         New_Line;

      elsif reponse = 5 then
         Put("-Vous avez choisi l'option: supprimer un individu et ses ancetres ");
         New_Line;
         Put("veuillez entrer la Clé associée à  l'individu");
         New_Line;
         Put("Cle : ");
         Get(Cle);
         detect_exception_4(A,R,Cle);
         New_Line;
         New_Line;
         New_Line;

         Put("***********************************************************************************************************************");
         New_Line;
         New_Line;
         New_Line;
         Put("-Veuillez choisir une autre action a  effectuer");
         New_Line;

      elsif reponse = 6 then
         Put("-Vous avez choisi l'option: obtenir la liste des individus ayant un seul parent connu ");
         New_Line;
         Put(" Liste des Clés des individus ayant un seul parent: ");
         Afficher_Liste(Un_Parent(A));
         New_Line;
         Put("operation reussie");
         New_Line;
         New_Line;
         New_Line;

         Put("***********************************************************************************************************************");
         New_Line;
         New_Line;
         New_Line;
         Put("-Veuillez choisir une autre action a  effectuer");
         New_Line;

      elsif reponse = 7 then
         Put("-Vous avez choisi l'option: obtenir la liste des individus ayant deux parents connus ");
         New_Line;
         Put(" Liste des Clés des individus ayant un seul parent: ");
         Afficher_Liste(deux_Parents(A));
         New_Line;
         Put("operation reussie");
         New_Line;
         New_Line;
         New_Line;

         Put("***********************************************************************************************************************");
         New_Line;
         New_Line;
         New_Line;
         Put("-Veuillez choisir une autre action a  effectuer");
         New_Line;

      elsif reponse = 8 then
         Put("-Vous avez choisi l'option: obtenir la liste des individus dont les deux parents sont inconnus ");
         New_Line;
         Put(" Liste des Clés des individus dont les deux parents sont inconnus: ");
         Afficher_Liste(Aucun_Parent(A));
         New_Line;
         Put("operation reussie");
         New_Line;
         New_Line;
         New_Line;

         Put("***********************************************************************************************************************");
         New_Line;
         New_Line;
         New_Line;
         Put("-Veuillez choisir une autre action a  effectuer");
         New_Line;

      elsif reponse = 9 then
         Put("-Vous avez choisi l'option: identifier la liste des ancetres d'un individu sur n generation ");
         New_Line;
         Put(" entrer la cle associee à l'individu et le nombre de generation n ");
         New_Line;
         Put( " Cle : ");
         get(Cle);
         New_Line;
         Put(" n : ");
         get(gen);
         detect_exception_8(A,Cle,Gen);
         Put("***********************************************************************************************************************");
         New_Line;
         New_Line;
         New_Line;
         Put("-Veuillez choisir une autre action a  effectuer");
         New_Line;

      elsif reponse = 10 then
         Put("--Vous avez choisi l'option: verifier que deux individus n et m ont un ou plusieurs ancetres homonymes ");
         New_Line;
         Put(" entrer les cles associees aux individus n et m");
         New_Line;
         Put( " Cle de n : ");
         get(Cle_n);
         Put( "Cle de m : ");
         New_Line;
         get(Cle_m);
         detect_exception_9(A,R,Cle_n,Cle_m);
         Put("***********************************************************************************************************************");
         New_Line;
         New_Line;
         New_Line;
         Put("-Veuillez choisir une autre action a  effectuer");
         New_Line;

        elsif reponse = 11 then
            Put("Que voulez-vous faire?");
            New_Line;
            Put("Supprimer,ajouter,lire (s/a/l)");
            get(rep_registre);
            if rep_registre = 's' then
                Put("Cle associée à l'info à supprimer: ");
                Get(Cle);
                Skip_Line;
                Supprimer_R_information(R,Cle);

            elsif rep_registre ='a' then
                Put("Cle associée à l'info à ajouter: ");
                Get(Cle);
                Skip_Line;
                ajouter_R_info(R,Cle);
            else
            afficher_R(R);
        end if;





      else
         Put("veuillez entrer un nombre entre 1 et 10");
        end if;









    end loop;




end menu;
