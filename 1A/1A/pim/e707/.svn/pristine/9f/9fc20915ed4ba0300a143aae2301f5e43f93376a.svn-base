with Arbre_genealogique;
use Arbre_genealogique;
with lien;
use lien;
with registre;
use registre;
package foret is
    Est_Absent_Arbre : exception;
    Est_Present_Arbre :  exception;
   type T_foret is limited private;

   -- Comment initiaFiser Fa forêt.
   procedure initialiser_foret(F : out T_foret; A : in T_arbre_gen);

   --Comment afficher Fa forêt.
   procedure afficher_Foret(F : in T_foret);

   --Comment reFier deux arbres par Fa notion de conjoint
   procedure conjoint( F : in T_Foret;A1 : in T_arbre_gen; A2: in T_arbre_gen; R : in out T_Registre );


   procedure frere( F : in T_Foret; A_enfant: in T_arbre_gen;A_frere: out T_Arbre_Gen; R : in out T_Registre);


    procedure Ajouter_T_Foret_Arbre(F: in out T_Foret;Element:in T_Arbre_gen;R: in out T_Registre);

    procedure Vider_T_Foret_Arbre(F:in out T_Foret;Element: in T_Arbre_gen);

   function Est_Present_T_Foret_Arbre(F: in T_Foret; Element: in T_Arbre_gen) return Boolean;

   --function longueur_T_Foret_Arbre(F:in T_Foret) return Integer;
   --function obtenir_element_Arbre(F: in T_Foret) return Integer;
   --function est_vide_T_Foret_Arbre(F : in T_Foret) return boolean;
   function obtenir_conjoint_foret(F : in T_Foret; A1 : in T_Arbre_Gen ; R : in out T_Registre) return T_Liste;
   function obtenir_frere_foret(F : in T_Foret; A1 : in T_Arbre_Gen; R : in out T_Registre) return T_Liste;
   function obtenir_beau_frere(F : in T_foret; A1 : in T_Arbre_Gen; R : in out T_Registre) return T_Liste;

private
   type Cellule_A;
    type T_Foret is access cellule_A;
    type cellule_A is
        record
        A: T_Arbre_Gen;
        suivant : T_Foret;
        end record;

end foret;
