%
Nbits=10000;
Ns=10 
t0=Ns;  
Eb_N0_db=[-2:6];
%Durée symbole en nombre d’échantillons(Ts=NsTe)
% Ns=4;
% t0=Ns;
% %Nombre de bits générés
% nb_bits=100; 
%Génération de l’information binaire
bits=randi([0,1],1,nb_bits);
%Mapping binaire à moyenne nulle:0->-1, 1->1
Symboles=2*bits-1;
%Génération de la suite de Diracs pondérés par les symboles (suréchantillonnage)
Suite_diracs=kron(Symboles, [1 zeros(1,Ns-1)]); 

%Génération de la réponse impulsionnelle du filtre de mise en forme(NRZ)
h=ones(1,Ns);
%Filtrage de mise en forme
x=filter(h,1,Suite_diracs);
%Affichage du signal généré 
figure ;
plot(x);
axis([0 nb_bits-1 -1.5 1.5]);
xlabel("Temps (s)");
ylabel("Amplitude");

%Calcul de la DSP du signal par périodogramme
DSP_x=(1/length(x))*abs(fft(x,2^nextpow2(length(x)))).^2;
%Affichage de la DSP du signal généré 
figure
plot(linspace(0,1,length(DSP_x)), DSP_x);



%Diagramme de l'oeil

hr=ones(1,Ns);
r_filtre = filter(hr,1,x);
figure;
y=reshape(r_filtre,Ns,nb_bits);
plot(y);

% figure;
%  for i=1:(nb_bits-1)/Ns
%      
%      plot([0:Ns]/Ns,x(Ns*i:(Ns*(i+1))));
%      xlabel("Temps normalisé à Ts");
%      hold on
%  end

%Génération du bruit gaussien
%TEB=zeros(9,1);
for i = 1:length(Eb_N0_db)
    sigma2=mean(x.^2)*Ns/(2*10^(Eb_N0_db(i)/10));
    bruit=sqrt(sigma2)*randn(1,nb_bits*Ns);
    
    %Signal reçu
    r = x + bruit;
    
    %Filtre de réception
    hr=ones(1,Ns);
    r_filtre = filter(hr,1,r);
    
    
    %Echantillonnage
    z_ech=r_filtre(t0:Ns:end);
    
    symbole_est=sign(z_ech);
    bits_est=(symbole_est+1)/2;
    TEB(i)=mean(bits_est~=bits);

end

figure
plot(r);
    

figure;
plot(r_filtre/max(r_filtre));


figure 
TEB_th=1-normcdf(sqrt(10.^(Eb_N0_db/10)));
plot(Eb_N0_db,10*log10(TEB));
hold on
plot(Eb_N0_db,10*log10(TEB_th),'r');
xlabel("Bruit");
ylabel("TEB");


