package principal;

import java.util.ArrayList;
import java.util.Random;

import fenetre.FenetreJeu;
import territoires.*;

public class Main {

	static final String[] nomFactions = {"Vikings", "Romains", "Egyptiens"};
	
	
	public static void main(String[] args) {
		//TODO passer en argument, garder comme ça pour les tests
		int nbFactions = 1;
		ArrayList<Faction> factions = new ArrayList<>();
		for (int i = 0 ; i < nbFactions ; i++) {
			factions.add(new Faction(nomFactions[i]));
		}
		
		// Création de la carte du monde
		Territoire[][] carte = genererCarte(3,3, nbFactions);
		// Attribution aléatoire des capitales
		for (Territoire[] ligne : carte) {
			for (Territoire t : ligne) {
				if (t instanceof Capitale) {
					Random rand = new Random();
					int r = rand.nextInt(nbFactions);
					t.setFaction(factions.get(r));
					factions.remove(r);
					nbFactions--;
				}
			}
		}
		
		new FenetreJeu();
	}
	
	
		
	
	
	/** Génération de la carte du monde.
	 * 
	 * @param nblignes
	 * @param nbcolonnes
	 * @param nbFactions
	 * @return La carte du monde (matrice de territoires)
	 */
	public static Territoire[][] genererCarte(int nblignes, int nbcolonnes, int nbFactions){
		Territoire[][] territoires = new Territoire[nblignes][nbcolonnes];
		
		// Instanciation des territoires
		for (int ligne = 0 ; ligne < nblignes ; ligne++) {
			for (int colonne = 0 ; colonne < nbcolonnes ; colonne++) {
				//TODO : Temporaire
				if (ligne == 0 && colonne == 0) {
					territoires[ligne][colonne] = new Capitale("CAPITALE :: Ligne : " + ligne + " / colonne : " + colonne);
				} else {
					territoires[ligne][colonne] = new Territoire("Ligne : " + ligne + " / colonne : " + colonne);
				}
			}
		}
		// Ajout des voisins
		for (int ligne = 0 ; ligne < nblignes ; ligne++) {
			for (int colonne = 0 ; colonne < nbcolonnes ; colonne++) {
				if (ligne != 0) {
					territoires[ligne][colonne].addVoisin(territoires[ligne-1][colonne]);
				}
				if (ligne != nblignes-1) {
					territoires[ligne][colonne].addVoisin(territoires[ligne+1][colonne]);
				}
				if (colonne != 0) {
					territoires[ligne][colonne].addVoisin(territoires[ligne][colonne-1]);
				}
				if (colonne != nbcolonnes-1) {
					territoires[ligne][colonne].addVoisin(territoires[ligne][colonne+1]);
				}
			}
		}
		
		return territoires;
	}
	
}
