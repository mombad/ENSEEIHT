File ./allumettes/ConfigurationException.java: 21 tokens, 17 lines
File ./allumettes/Jeu.java: 23 tokens, 22 lines
File ./allumettes/Arbitre.java: 521 tokens, 111 lines
File ./allumettes/Strategie.java: 16 tokens, 7 lines
File ./allumettes/StrategieTricheur.java: 42 tokens, 12 lines
File ./allumettes/JeuReel.java: 113 tokens, 31 lines
File ./allumettes/OperationInterditeException.java: 19 tokens, 9 lines
File ./allumettes/Partie.java: 414 tokens, 104 lines
File ./allumettes/CoupInvalideException.java: 51 tokens, 29 lines
File ./allumettes/Joueur.java: 89 tokens, 30 lines
File ./allumettes/StrategieHumain.java: 93 tokens, 26 lines
File ./allumettes/Procuration.java: 62 tokens, 20 lines
File ./allumettes/StrategieNaif.java: 63 tokens, 15 lines
File ./allumettes/StrategieRapide.java: 49 tokens, 13 lines
File ./allumettes/StrategieExpert.java: 108 tokens, 25 lines
Total input: 15 files (15 new, 0 old), 1684 tokens

./allumettes/Partie.java: line 84-88 [37]
./allumettes/Partie.java: line 90-94
< 		case "naif":
< 			j = new Joueur(tab[0], new StrategieNaif());
< 			break;
< 		case "expert":
< 			j = new Joueur(tab[0], new StrategieExpert());
---
> 		case "humain":
> 			j = new Joueur(tab[0], new StrategieHumain());
> 			break;
> 		case "tricheur":
> 			j = new Joueur(tab[0], new StrategieTricheur());

./allumettes/StrategieNaif.java: line 1-8 [28]
./allumettes/StrategieExpert.java: line 1-7
< package allumettes;
< import java.util.Random;
< 
< public class StrategieNaif implements Strategie  {
< 
< 	@Override
< 	public int getPrise(Jeu jeu) throws CoupInvalideException {
< 		int n = jeu.getNombreAllumettes() + 1;
---
> package allumettes;
> 
> public class StrategieExpert implements Strategie {
> 
> 	@Override
> 	public int getPrise(Jeu jeu)  throws CoupInvalideException {
> 		int n = jeu.getNombreAllumettes();

./allumettes/Arbitre.java: line 54-57 [27]
./allumettes/Arbitre.java: line 58-61
< 			j = 1;
< 			partieFinie = testFinJeu(jeu, partieFinie, j);
< 			partieFinie = gestionTriche(jeu, procuration,
< 					this.joueur1, partieFinie);
---
> 			j = 2;
> 			partieFinie = testFinJeu(jeu, partieFinie, j);
> 			partieFinie = gestionTriche(jeu, procuration,
> 					this.joueur2, partieFinie);

