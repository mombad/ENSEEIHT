Date de l'évaluation : samedi 21 mars 2020, 21:54:29 (UTC+0100)

Nombre de similitudes (voir evaluation1/sim_java.txt) : 5
Les similitudes indiquent généralement du code à restructurer.

Erreurs checkstyle (différentes/types) : 35/11	(voir evaluation1//checkstyle.log)

Utilisation de 'Scanner' : ok
	./allumettes/Joueur.java:	Scanner scanner = new Scanner(System.in);
	./allumettes/StrategieHumain.java:	Scanner scanner = new Scanner(System.in);

Utilisation de 'split' : ok mais un seul split devrait suffir !  Code à restructurer...
	./allumettes/Partie.java:			j1 = initialiserJoueur(infoJoueur1.split("@")[0],infoJoueur1.split("@")[1]);
	./allumettes/Partie.java:			j2 = initialiserJoueur(infoJoueur2.split("@")[0],infoJoueur2.split("@")[1]);

Utilisation de 'Random' : ok
	./allumettes/StrategieNaif.java:import java.util.Random;
	./allumettes/StrategieNaif.java:		Random r = new Random();

Utilisation de '3' : la constante Jeu.PRISE_MAX doit être utilisée
	./allumettes/JeuReel.java:			throw new CoupInvalideException(nbPrises,"> 3");
	./allumettes/Partie.java:			if (args.length<3) {

Utilisation de 'System.exit' : ok

Compilation de Partie.java : OK.
Compilation de Arbitre.java : OK.
Test exemplePresqueSujet : ok
Test exempleTricheurSujet : ok
Test exempleConfiantTricheurSujet : ok
Test exempleRobustesse : ok
Test exempleRapideRapide : ok
Test exempleTricheurExpert : ok

On recommence avec les classes/interfaces fournies : Jeu ConfigurationException CoupInvalideException
Compilation de Partie.java : OK.
Compilation de Arbitre.java : OK.

Vérification du respect du diagramme de classe...
Test FormeTest : Tests run: 2,  Failures: 2	(voir evaluation1/FormeTest.log)
    1) testerC14_C15(FormeTest)
        AssertionError: Joueur devrait avoir deux attributs expected:<2> but was:<3>
    2) testerRespectArchitecture(FormeTest)
        AssertionError: La méthode devrait être publique : protected String allumettes.Joueur.getNom()


Aucune classe de test (fichier *Test.java) !
